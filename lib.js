// Generated by CoffeeScript 1.7.1

/*
    reference:
    + http://viget.com/extend/2666
    + http://www.paulirish.com/2011/requestanimationframe-for-smart-animating/
 */

(function() {
  var Effect;

  Effect = (function() {
    function Effect(elem, init_src, cb) {
      this._initMethod();
      this.parent = elem;
      this.parent.style.position = 'relative';
      this.parent.style.overflow = 'hidden';
      this._insertImg(init_src, {
        position: 'absolute',
        left: '0%',
        top: '0%'
      }, (function(_this) {
        return function(img) {
          _this.current = img;
          if (typeof cb === 'function') {
            return cb();
          }
        };
      })(this));
      this._delta = 0.2;
    }

    Effect.prototype._getTime = function() {
      if (window.performance.now) {
        return window.performance.now();
      }
      return Date.now();
    };

    Effect.prototype._initMethod = function() {
      var lastTime, vendors, x;
      lastTime = 0;
      vendors = ['webkit', 'moz'];
      x = 0;
      while (x < vendors.length && !window.requestAnimationFrame) {
        window.requestAnimationFrame = window[vendors[x] + 'RequestAnimationFrame'];
        window.cancelAnimationFrame = window[vendors[x] + 'CancelAnimationFrame'] || window[vendors[x] + 'CancelRequestAnimationFrame'];
        ++x;
      }
      if (!window.requestAnimationFrame) {
        window.requestAnimationFrame = function(callback, element) {
          var currTime, id, timeToCall;
          currTime = (new Date).getTime();
          timeToCall = Math.max(0, 16 - (currTime - lastTime));
          id = window.setTimeout((function() {
            callback(currTime + timeToCall);
          }), timeToCall);
          lastTime = currTime + timeToCall;
          return id;
        };
      }
      if (!window.cancelAnimationFrame) {
        return window.cancelAnimationFrame = function(id) {
          clearTimeout(id);
        };
      }
    };

    Effect.prototype._insertImg = function(src, style, cb) {
      var img, k;
      img = document.createElement('img');
      img.style.width = '100%';
      img.style.height = '100%';
      img.style.position = 'absolute';
      img.style.opacity = '1';
      img.src = src;
      for (k in style) {
        img.style[k] = style[k];
      }
      return img.onload = (function(_this) {
        return function() {
          img.onload = null;
          _this.parent.appendChild(img);
          return cb(img);
        };
      })(this);
    };

    Effect.prototype._finish = function() {
      this.parent.removeChild(this.current);
      this.animate.style.left = '0%';
      this.animate.style.top = '0%';
      this.animate.style.opacity = '1';
      this.current = this.animate;
      return this.animating = false;
    };

    Effect.prototype._percentAdd = function(per, delta) {
      var p;
      p = parseFloat(per.substring(0, per.length - 1));
      return (p + delta) + '%';
    };

    Effect.prototype._percentToFloat = function(per) {
      return parseFloat(per.substring(0, per.length - 1)) / 100.0;
    };

    Effect.prototype._hasFinishAnimate = function() {
      return this.animate.style.top === '0%' && this.animate.style.left === '0%' && this.animate.style.opacity === '1';
    };

    Effect.prototype._moveCurrentImg = function(name, delta) {
      return this.current.style[name] = this._percentAdd(this.current.style[name], delta);
    };

    Effect.prototype._moveAnimateImg = function(name, delta) {
      return this.animate.style[name] = this._percentAdd(this.animate.style[name], delta);
    };

    Effect.prototype._changeStyle = function(elem, name, delta) {
      return elem.style[name] = this._percentAdd(elem.style[name], delta);
    };

    Effect.prototype._animate = function(src, style, func, stopFunc, onAnimateFinished) {
      if (!this.animating) {
        this.animating = true;
        return this._insertImg(src, style, (function(_this) {
          return function(img) {
            var endTime, lo, startTime;
            _this.animate = img;
            startTime = _this._getTime();
            endTime = 0;
            lo = function() {
              var diff;
              if (stopFunc()) {
                _this._finish();
                if (typeof onAnimateFinished === 'function') {
                  onAnimateFinished();
                }
                return;
              }
              endTime = _this._getTime();
              diff = endTime - startTime;
              func(diff * _this._delta);
              startTime = _this._getTime();
              return requestAnimationFrame(lo);
            };
            return requestAnimationFrame(lo);
          };
        })(this));
      }
    };

    Effect.prototype.pushLeft = function(imgURL, onAnimateFinished) {
      return this._animate(imgURL, {
        left: '100%',
        top: '0%'
      }, (function(_this) {
        return function(delta) {
          var distance;
          distance = -_this._distance('left', delta);
          _this._moveCurrentImg('left', distance);
          return _this._moveAnimateImg('left', distance);
        };
      })(this), (function(_this) {
        return function() {
          return _this._percentToFloat(_this.animate.style.left) <= 0;
        };
      })(this), onAnimateFinished);
    };

    Effect.prototype.pushRight = function(imgURL, onAnimateFinished) {
      return this._animate(imgURL, {
        left: '-100%',
        top: '0%'
      }, (function(_this) {
        return function(delta) {
          var distance;
          distance = _this._distance('left', delta);
          _this._moveCurrentImg('left', distance);
          return _this._moveAnimateImg('left', distance);
        };
      })(this), (function(_this) {
        return function() {
          return _this._percentToFloat(_this.animate.style.left) >= 0;
        };
      })(this), onAnimateFinished);
    };

    Effect.prototype.pushDown = function(imgURL, onAnimateFinished) {
      return this._animate(imgURL, {
        top: '-100%',
        left: '0%'
      }, (function(_this) {
        return function(delta) {
          var distance;
          distance = _this._distance('top', delta);
          _this._moveCurrentImg('top', distance);
          return _this._moveAnimateImg('top', distance);
        };
      })(this), (function(_this) {
        return function() {
          return _this._percentToFloat(_this.animate.style.top) >= 0;
        };
      })(this), onAnimateFinished);
    };

    Effect.prototype.pushUp = function(imgURL, onAnimateFinished) {
      return this._animate(imgURL, {
        top: '100%',
        left: '0%'
      }, (function(_this) {
        return function(delta) {
          var distance;
          distance = -_this._distance('top', delta);
          _this._moveCurrentImg('top', distance);
          return _this._moveAnimateImg('top', distance);
        };
      })(this), (function(_this) {
        return function() {
          return _this._percentToFloat(_this.animate.style.top) <= 0;
        };
      })(this), onAnimateFinished);
    };

    Effect.prototype.slideUp = function(imgURL, onAnimateFinished) {
      return this._animate(imgURL, {
        top: '100%',
        left: '0%'
      }, (function(_this) {
        return function(delta) {
          return _this._moveAnimateImg('top', -_this._distance('top', delta));
        };
      })(this), (function(_this) {
        return function() {
          return _this._percentToFloat(_this.animate.style.top) <= 0;
        };
      })(this), onAnimateFinished);
    };

    Effect.prototype.slideDown = function(imgURL, onAnimateFinished) {
      return this._animate(imgURL, {
        top: '-100%',
        left: '0%'
      }, (function(_this) {
        return function(delta) {
          return _this._moveAnimateImg('top', _this._distance('top', delta));
        };
      })(this), (function(_this) {
        return function() {
          return _this._percentToFloat(_this.animate.style.top) >= 0;
        };
      })(this), onAnimateFinished);
    };

    Effect.prototype._distance = function(style, delta) {
      return Math.min(delta, Math.abs(this._percentToFloat(this.animate.style[style]) * 100));
    };

    Effect.prototype.slideLeft = function(imgURL, onAnimateFinished) {
      return this._animate(imgURL, {
        top: '0%',
        left: '100%'
      }, (function(_this) {
        return function(delta) {
          return _this._moveAnimateImg('left', -_this._distance('left', delta));
        };
      })(this), (function(_this) {
        return function() {
          return _this._percentToFloat(_this.animate.style.left) <= 0;
        };
      })(this), onAnimateFinished);
    };

    Effect.prototype.slideRight = function(imgURL, onAnimateFinished) {
      return this._animate(imgURL, {
        top: '0%',
        left: '-100%'
      }, (function(_this) {
        return function(delta) {
          return _this._moveAnimateImg('left', _this._distance('left', delta));
        };
      })(this), (function(_this) {
        return function() {
          return _this._percentToFloat(_this.animate.style.left) >= 0;
        };
      })(this), onAnimateFinished);
    };

    Effect.prototype.expand = function(imgURL, onAnimateFinished) {
      return this._animate(imgURL, {
        top: '50%',
        left: '50%',
        width: '0',
        height: '0'
      }, (function(_this) {
        return function(delta) {
          _this._changeStyle(_this.animate, 'width', delta);
          _this._changeStyle(_this.animate, 'height', delta);
          _this._changeStyle(_this.animate, 'top', -(delta / 2));
          return _this._changeStyle(_this.animate, 'left', -(delta / 2));
        };
      })(this), (function(_this) {
        return function() {
          return _this._percentToFloat(_this.animate.style.top) <= 0;
        };
      })(this), onAnimateFinished);
    };

    Effect.prototype.fadeIn = function(imgURL, onAnimateFinished) {
      return this._animate(imgURL, {
        top: '0%',
        left: '0%',
        opacity: '0'
      }, (function(_this) {
        return function() {
          var delta;
          delta = 0.0334;
          return _this.animate.style.opacity = parseFloat(_this.animate.style.opacity) + delta;
        };
      })(this), (function(_this) {
        return function() {
          return parseFloat(_this.animate.style.opacity) >= 1;
        };
      })(this), onAnimateFinished);
    };

    Effect.prototype.direct = function(imgURL, onFinished) {
      this.current.src = imgURL;
      if (typeof onFinished === 'function') {
        return onFinished();
      }
    };

    return Effect;

  })();

  window.Effect = Effect;

}).call(this);

//# sourceMappingURL=lib.map
